package db;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import entity.Item;


public class MySQLConnection {
	private Connection conn;
	public MySQLConnection() {
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			conn = DriverManager.getConnection(MySQLDBUtil.URL);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	public void close() {
		if (conn != null) {
			try {
				conn.close();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}
	
	public void setFavoriteItems(String userId, Item item) {
		// check if there is connection with db
		if (conn == null) {
			System.err.println("DB connection failed");
			return;
		}
		
		// Maybe insert item to items table
		saveItem(item);
		String sql = "INSERT IGNORE INTO history (user_id, item_id) VALUES (?, ?)";
		try {
			PreparedStatement statement = conn.prepareStatement(sql);
			statement.setString(1, userId); // sanitize userId to prevent SQL injection
			statement.setInt(2, item.getItemId());
			statement.executeUpdate();
		} catch (SQLException e){
			e.printStackTrace();
		}	
	}
	
	public void unsetFavoriteItems(String userId, int itemId) {
		if (conn == null) {
			System.err.println("DB connection failed");
			return;
		}
		String sql = "DELETE FROM history WHERE user_id = ? AND item_id = ?";
		try {
			PreparedStatement statement = conn.prepareStatement(sql);
			statement.setString(1, userId); 
			statement.setInt(2, itemId);
			statement.executeUpdate();
		} catch (SQLException e){
			e.printStackTrace();
		}
	}
	
	public void saveItem(Item item) {
		if (conn == null) {
			System.err.println("DB connection failed");
			return;
		}
		
		String sql = "INSERT IGNORE INTO items VALUES (?, ?, ?, ?, ?, ?, ?, ?)";
		try {
			PreparedStatement statement = conn.prepareStatement(sql);
			String amounts = MySQLDBUtil.concateDoubles(item.getAmounts());
			String units = MySQLDBUtil.concateStrings(item.getUnits());
			String ingredients = MySQLDBUtil.concateStrings(item.getIngredients());
			String instructions = MySQLDBUtil.concateStrings(item.getInstructions());
			
			statement.setInt(1, item.getItemId()); 
			statement.setString(2, item.getImageUrl());
			statement.setString(3, item.getTitle());
			statement.setString(4, amounts);
			statement.setString(5, units);
			statement.setString(6, ingredients);
			statement.setString(7, instructions);
			statement.setString(8, item.getSourceUrl());
			statement.executeUpdate();
			
//			sql = "INSERT IGNORE INTO keywords VALUES(?,?)";
//			statement = conn.prepareStatement(sql);
//			statement.setString(1, item.getItemId());
//			for (String keyword : item.getKeywords()) {  // ["software, "developer", "java"]
//				statement.setString(2, keyword);
//				statement.executeUpdate();               // 10, software; 10, developer ; 10, java
//			}
			
		} catch (SQLException e){
			e.printStackTrace();
		}
	}
	
	public Set<Integer> getFavoriteItemIds(String userId) {
		if (conn == null) {
			System.err.println("DB connection failed");
			return new HashSet<>();
		}
		
		Set<Integer> favoriteItems = new HashSet<>();
		
		try {
			String sql = "SELECT item_id FROM history WHERE user_id = ?";
			PreparedStatement statement = conn.prepareStatement(sql);
			statement.setString(1, userId);
			ResultSet rs = statement.executeQuery();
			while(rs.next()) {
				int itemId = rs.getInt("item_id");
				favoriteItems.add(itemId);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return favoriteItems;
	}
	
	public Set<Item> getFavoriteItems(String userId) {
		if (conn == null) {
			System.err.println("DB connection failed");
			return new HashSet<>();
		}
		Set<Item> favoriteItems = new HashSet<>();
		Set<Integer> favoritesItemIds = getFavoriteItemIds(userId);
		
		String sql = "SELECT * FROM items WHERE item_id = ?";
		try {
			PreparedStatement statement = conn.prepareStatement(sql);
			for (Integer itemId : favoritesItemIds) {
				statement.setInt(1, itemId);
				ResultSet rs = statement.executeQuery();
				if (rs.next()) {
					
					List<Double> amounts = MySQLDBUtil.textToDoubles(rs.getString("amounts"));
					List<String> units = MySQLDBUtil.textToStrings(rs.getString("units"));
					List<String> ingredients = MySQLDBUtil.textToStrings(rs.getString("ingredients"));
					List<String> instructions = MySQLDBUtil.textToStrings(rs.getString("instructions"));

					favoriteItems.add(Item.builder()
							.itemId(rs.getInt("item_id"))
							.imageUrl(rs.getString("image_url"))
							.title(rs.getString("title"))
							.amounts(amounts)
							.units(units)
							.ingredients(ingredients)
							.instructions(instructions)
							.sourceUrl(rs.getNString("source_url"))
							.build());
				}
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return favoriteItems;
	}
	
	public Set<String> getFridge(String userId) {
		if (conn == null) {
			System.err.println("DB connection failed");
			return new HashSet<>();
		}
		
		Set<String> fridgeStorage = new HashSet<>();
		
		try {
			String sql = "SELECT ingredient FROM fridge WHERE user_id = ?";
			PreparedStatement statement = conn.prepareStatement(sql);
			statement.setString(1, userId);
			ResultSet rs = statement.executeQuery();
			while(rs.next()) {
				String ingredient = rs.getString("ingredient");
				fridgeStorage.add(ingredient);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return fridgeStorage;
	}
	
	public void setIngredient(String userId, String ingredient) {
		if (conn == null) {
			System.err.println("DB connection failed");
			return;
		}
		
		String sql = "INSERT IGNORE INTO fridge VALUES (?, ?)";
		try {
			PreparedStatement statement = conn.prepareStatement(sql);
			
			statement.setString(1, userId); 
			statement.setString(2, ingredient);
			statement.executeUpdate();
		} catch (SQLException e){
			e.printStackTrace();
		}
		
	}
	
	public void unsetIngredient(String userId, String ingredient) {
		if (conn == null) {
			System.err.println("DB connection failed");
			return;
		}
		String sql = "DELETE FROM history WHERE user_id = ? AND ingredient = ?";
		try {
			PreparedStatement statement = conn.prepareStatement(sql);
			statement.setString(1, userId); 
			statement.setString(2, ingredient);
			statement.executeUpdate();
		} catch (SQLException e){
			e.printStackTrace();
		}
	}
	
	public String getFullname(String userId) {
		if (conn == null) {
			System.err.println("DB connection failed");
			return "";
		}
		
		String name = "";
		String sql = "SELECT first_name, last_name FROM users WHERE user_id = ?";
		try {
			PreparedStatement statement = conn.prepareStatement(sql);
			statement.setString(1, userId);
			ResultSet rs = statement.executeQuery();
			
			if (rs.next()) {
				name = rs.getString("first_name") + " " + rs.getString("last_name");
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return name;
	}
	
	
	public boolean verifyLogin(String userId, String password) {
		if (conn == null) {
			System.err.println("DB connection failed");
			return false;
		}
		
		String sql = "SELECT user_id FROM users WHERE user_id = ? AND password = ?";
		try {
			PreparedStatement statement = conn.prepareStatement(sql);
			statement.setString(1, userId);
			statement.setString(2, password);
			ResultSet rs = statement.executeQuery();
			
			return rs.next();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return false;
	}
	
	public boolean addUser(String userId, String password, String firstname, String lastname) {
		if (conn == null) {
			System.err.println("DB connection failed");
			return false;
		}
		
		String sql = "INSERT IGNORE INTO users VALUES(?, ?, ?, ?)";
		
		try {
			PreparedStatement statement = conn.prepareStatement(sql);
			statement.setString(1, userId);
			statement.setString(2, password);
			statement.setString(3, firstname);
			statement.setString(4, lastname);
			
			// return true if successfully insert (executeUpdate returns row count inserted)
			return statement.executeUpdate() == 1; 
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return false;
	}
	

}









